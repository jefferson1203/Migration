package main

/*
import (
	"net/http"

	"github.com/gin-gonic/gin"
)

func PingHandler(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{"message": "pong"})
}

func StartSimulationHandler(c *gin.Context) {
	StartSimulation()
	c.JSON(http.StatusOK, gin.H{"message": "Simulation started"})
}

func StopSimulationHandler(c *gin.Context) {
	StopSimulation()
	c.JSON(http.StatusOK, gin.H{"message": "Simulation stopped"})
}

func GetSimulationStateHandler(c *gin.Context) {
	state := GetSimulationState()
	c.JSON(http.StatusOK, state)
}

func GetSimulationConfigHandler(c *gin.Context) {
	config := GetSimulationConfig()
	c.JSON(http.StatusOK, config)
}

func SetSimulationConfigHandler(c *gin.Context) {
	var newConfig SimulationConfig
	if err := c.ShouldBindJSON(&newConfig); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	SetSimulationConfig(newConfig)
	c.JSON(http.StatusOK, gin.H{"message": "Simulation config updated"})
}

func SetTimeStepHandler(c *gin.Context) {
	var newTimeStep struct {
		TimeStep int `json:"timeStep"`
	}
	if err := c.ShouldBindJSON(&newTimeStep); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	SetTimeStep(newTimeStep.TimeStep)
	c.JSON(http.StatusOK, gin.H{"message": "Time step updated"})
}

func GetTimeStepHandler(c *gin.Context) {
	step := GetTimeStep()
	c.JSON(http.StatusOK, gin.H{"timeStep": step})
}

func SaveSimulationStateHandler(c *gin.Context) {
	err := SaveSimulationState()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, gin.H{"message": "Simulation state saved"})
}

func LoadSimulationStateHandler(c *gin.Context) {
	savedState, err := LoadSimulationState()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, savedState)
}
*/
